
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from config import token
from data import add_rating, get_average_rating, add_review, get_reviews, record_game_play, get_game_stats

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = token

# –ë–∞–∑–∞ –∏–≥—Ä —Å Web App URL
GAMES = {
    "wordle": {
        "name": "üî† –í–æ—Ä–¥–ª–∏ (Wordle)",
        "available": True,
        "web_app_url": "https://Alh1mikk.github.io/tg-game/wordle",
        "description": "–£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ –∑–∞ 6 –ø–æ–ø—ã—Ç–æ–∫!",
        "emoji": "üî†"
    },
    "tic-tac-toe": {
        "name": "‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏",
        "available": True,
        "web_app_url": "https://Alh1mikk.github.io/tg-game/tic-tac-toe",
        "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ 3x3",
        "emoji": "‚ùå"
    },
    "snake": {
        "name": "üêç –ó–º–µ–π–∫–∞",
        "available": True,
        "web_app_url": "https://Alh1mikk.github.io/tg-game/snake",
        "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∑–º–µ–π–∫–∞ —Å —è–±–ª–æ–∫–∞–º–∏",
        "emoji": "üêç"
    },
    "memory": {
        "name": "üé¥ –ò–≥—Ä–∞ –ø–∞–º—è—Ç–∏",
        "available": True,
        "web_app_url": "https://Alh1mikk.github.io/tg-game/memory",
        "description": "–ù–∞–π–¥–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏",
        "emoji": "üé¥"
    },
    "quiz": {
        "name": "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞",
        "available": True,
        "web_app_url": "https://Alh1mikk.github.io/tg-game/quiz",
        "description": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è",
        "emoji": "üß†"
    },
    "puzzle": {
        "name": "üß© –ü–∞–∑–ª-15",
        "available": True,
        "web_app_url": "https://Alh1mikk.github.io/tg-game/puzzle",
        "description": "–°–æ–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É –∏–∑ 15 —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
        "emoji": "üß©"
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    keyboard = [
        [InlineKeyboardButton("üéÆ –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É", callback_data="hub")],
        [InlineKeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä", callback_data="top_games")],
        [InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∏–≥—Ä—ã", callback_data="rate_games")],
        [InlineKeyboardButton("üí¨ –û—Ç–∑—ã–≤—ã", callback_data="reviews")],
        [InlineKeyboardButton("üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data="support")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = """
üéÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –•–∞–± –ò–≥—Ä!**

‚ú® **–ù–∞—à–∏ –∏–≥—Ä—ã:**
‚Ä¢ üî† –í–æ—Ä–¥–ª–∏ - —É–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ
‚Ä¢ ‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ - –∫–ª–∞—Å—Å–∏–∫–∞
‚Ä¢ üêç –ó–º–µ–π–∫–∞ - –Ω–æ—Å—Ç–∞–ª—å–≥–∏—è
‚Ä¢ üé¥ –ü–∞–º—è—Ç—å - —Ç—Ä–µ–Ω–∏—Ä—É–µ–º –º–æ–∑–≥
‚Ä¢ üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π
‚Ä¢ üß© –ü–∞–∑–ª-15 - –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞

üöÄ **–ó–∞–ø—É—Å–∫–∞—é—Ç—Å—è –≤ –æ–¥–∏–Ω –∫–ª–∏–∫!**

‚≠ê **–û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –∏–≥—Ä—ã –∏ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –æ—Ç–∑—ã–≤—ã!**
üí∞ **–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞!**
"""

    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_game_hub(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ö–∞–± –∏–≥—Ä"""
    query = update.callback_query
    await query.answer()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
    keyboard = []
    row = []
    for i, (game_key, game_info) in enumerate(GAMES.items()):
        status = "‚úÖ" if game_info["available"] else "üöß"
        rating = get_average_rating(game_key)
        stars = "‚≠ê" * int(rating) if rating > 0 else "‚òÜ"
        button_text = f"{game_info['emoji']} {game_info['name'].split()[-1]} {stars}"
        callback_data = f"game_{game_key}" if game_info["available"] else "dev"

        row.append(InlineKeyboardButton(button_text, callback_data=callback_data))

        # –ö–∞–∂–¥—ã–µ 2 –∫–Ω–æ–ø–∫–∏ - –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        if len(row) == 2 or i == len(GAMES) - 1:
            keyboard.append(row)
            row = []

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.extend([
        [InlineKeyboardButton("üèÜ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ", callback_data="top_games")],
        [InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∏–≥—Ä—ã", callback_data="rate_games")],
        [InlineKeyboardButton("üí¨ –û—Ç–∑—ã–≤—ã", callback_data="reviews")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="hub"), InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)

    hub_text = """
üéØ **–•–∞–± –ò–≥—Ä**

–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞:

üî† –í–æ—Ä–¥–ª–∏ - —É–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ
‚ùå –ö—Ä–µ—Å—Ç-–Ω–æ–ª - –∫–ª–∞—Å—Å–∏–∫–∞
üêç –ó–º–µ–π–∫–∞ - —Ä–µ—Ç—Ä–æ –∏–≥—Ä–∞
üé¥ –ü–∞–º—è—Ç—å - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ - –∑–Ω–∞–Ω–∏—è
üß© –ü–∞–∑–ª-15 - –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞

‚úÖ –í—Å–µ –∏–≥—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ Telegram!
‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –∏–≥—Ä—ã –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤—ã!
"""

    await query.edit_message_text(
        hub_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_top_games(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    games_stats = []
    for game_key in GAMES:
        if GAMES[game_key]["available"]:
            stats = get_game_stats(game_key)
            rating = get_average_rating(game_key)
            games_stats.append({
                "key": game_key,
                "plays": stats.get("plays", 0),
                "rating": rating
            })

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–≥—Ä –∏ —Ä–µ–π—Ç–∏–Ω–≥—É
    games_stats.sort(key=lambda x: (x["plays"], x["rating"]), reverse=True)
    top_games = [game["key"] for game in games_stats[:3]]

    keyboard = []
    for game_key in top_games:
        if game_key in GAMES and GAMES[game_key]["available"]:
            game_info = GAMES[game_key]
            rating = get_average_rating(game_key)
            stars = "‚≠ê" * int(rating) if rating > 0 else "‚òÜ"
            keyboard.append([
                InlineKeyboardButton(
                    f"{stars} {game_info['name']}",
                    callback_data=f"game_{game_key}"
                )
            ])

    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="hub"),
        InlineKeyboardButton("üéÆ –í—Å–µ –∏–≥—Ä—ã", callback_data="hub")
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)

    top_text = """
üèÜ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–≥—Ä—ã**

‚≠ê **–¢–æ–ø-3 –¥–ª—è –Ω–∞—á–∞–ª–∞:**

üî† **–í–æ—Ä–¥–ª–∏** - –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è –∏–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞
‚ùå **–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏** - –ë—ã—Å—Ç—Ä–∞—è –∫–ª–∞—Å—Å–∏–∫–∞
üêç **–ó–º–µ–π–∫–∞** - –ù–æ—Å—Ç–∞–ª—å–≥–∏—á–µ—Å–∫–∏–π —Ö–∏—Ç

–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —Å—Ç–∞—Ä—Ç–∞!
"""

    await query.edit_message_text(
        top_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_game_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()

    game_key = query.data.replace("game_", "")

    if game_key in GAMES:
        game_info = GAMES[game_key]

        if game_info["available"]:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
            record_game_play(game_key)

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã
            rating = get_average_rating(game_key)
            stars = "‚≠ê" * int(rating) if rating > 0 else "‚òÜ"
            reviews = get_reviews(game_key, limit=2)
            reviews_text = ""
            if reviews:
                reviews_text = "\n\nüí¨ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:**\n"
                for review in reviews:
                    reviews_text += f"‚Ä¢ {review['text']}\n"

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [InlineKeyboardButton(
                    "üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å",
                    web_app=WebAppInfo(url=game_info["web_app_url"])
                )],
                [InlineKeyboardButton("üìã –ö–∞–∫ –∏–≥—Ä–∞—Ç—å?", callback_data=f"desc_{game_key}")],
                [InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data=f"rate_{game_key}")],
                [InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"review_{game_key}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="hub")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"{game_info['emoji']} **{game_info['name']}** {stars}\n\n{game_info['description']}{reviews_text}",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await show_development_message(update, context)

async def show_game_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()

    game_key = query.data.replace("desc_", "")
    game_info = GAMES[game_key]

    # –û–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
    rules = {
        "wordle": """
üî† **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ –í–æ—Ä–¥–ª–∏:**

üéØ **–¶–µ–ª—å:** –£–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤ –∑–∞ 6 –ø–æ–ø—ã—Ç–æ–∫

üìù **–ü—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ –í–≤–æ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –∏–∑ 5 –±—É–∫–≤
‚Ä¢ üü© –ó–µ–ª–µ–Ω–∞—è - –±—É–∫–≤–∞ –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ
‚Ä¢ üü® –ñ–µ–ª—Ç–∞—è - –±—É–∫–≤–∞ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ, –Ω–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
‚Ä¢ ‚¨ú –°–µ—Ä–∞—è - –±—É–∫–≤—ã –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å —á–∞—Å—Ç—ã—Ö –±—É–∫–≤
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ü–≤–µ—Ç–∞
"""
        ,
        "tic-tac-toe": """
‚ùå **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏:**

üéØ **–¶–µ–ª—å:** –ü–æ—Å—Ç–∞–≤–∏—Ç—å 3 —Å–≤–æ–∏—Ö –∑–Ω–∞–∫–∞ –≤ —Ä—è–¥

üìù **–ü—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ –ò–≥—Ä–æ–∫–∏ —Ö–æ–¥—è—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏
‚Ä¢ ‚ùå - –∫—Ä–µ—Å—Ç–∏–∫–∏, ‚≠ï - –Ω–æ–ª–∏–∫–∏
‚Ä¢ –ü–æ–±–µ–¥–∞: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å, –≤–µ—Ä—Ç–∏–∫–∞–ª—å –∏–ª–∏ –¥–∏–∞–≥–æ–Ω–∞–ª—å
‚Ä¢ –ù–∏—á—å—è –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –ø–æ–ª–µ
"""
        ,
        "snake": """
üêç **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ –ó–º–µ–π–∫—É:**

üéØ **–¶–µ–ª—å:** –í—ã—Ä–∞—Å—Ç–∏—Ç—å –∑–º–µ–π–∫—É –∫–∞–∫ –º–æ–∂–Ω–æ –¥–ª–∏–Ω–Ω–µ–µ

üìù **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ ‚¨ÜÔ∏è –í–≤–µ—Ä—Ö - –≤–ª–µ–≤–æ –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ ‚¨áÔ∏è –í–Ω–∏–∑ - –≤–ø—Ä–∞–≤–æ –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ ‚û°Ô∏è –í–ø—Ä–∞–≤–æ - –≤–Ω–∏–∑ –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ ‚¨ÖÔ∏è –í–ª–µ–≤–æ - –≤–≤–µ—Ä—Ö –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

üçé **–°–æ–±–∏—Ä–∞–π—Ç–µ —è–±–ª–æ–∫–∏** –¥–ª—è —Ä–æ—Å—Ç–∞
‚ö†Ô∏è **–ò–∑–±–µ–≥–∞–π—Ç–µ** —Å—Ç–µ–Ω –∏ —Å–≤–æ–µ–≥–æ —Ö–≤–æ—Å—Ç–∞
"""
        ,
        "memory": """
üé¥ **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ –ü–∞–º—è—Ç—å:**

üéØ **–¶–µ–ª—å:** –ù–∞–π—Ç–∏ –≤—Å–µ –ø–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏

üìù **–ü—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –ø–æ 2 –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞ —Ö–æ–¥
‚Ä¢ –ï—Å–ª–∏ —Å–æ–≤–ø–∞–ª–∏ - –æ—Å—Ç–∞—é—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏
‚Ä¢ –ï—Å–ª–∏ –Ω–µ—Ç - –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—é—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ
‚Ä¢ –ó–∞–ø–æ–º–∏–Ω–∞–π—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫

üß† **–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ –ø–∞–º—è—Ç—å** –∏ –≤–Ω–∏–º–∞–Ω–∏–µ!
"""
        ,
        "quiz": """
üß† **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ –í–∏–∫—Ç–æ—Ä–∏–Ω—É:**

üéØ **–¶–µ–ª—å:** –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤

üìù **–ü—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –∏–∑ 4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
‚Ä¢ –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - +1 –±–∞–ª–ª
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Ç–µ—Ç

üìö **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ** —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!
"""
        ,
        "puzzle": """
üß© **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ –ü–∞–∑–ª-15:**

üéØ **–¶–µ–ª—å:** –†–∞—Å—Å—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É

üìù **–ü—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ –ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ –∫–æ—Å—Ç—è—à–∫–∏ –∫–ª–∏–∫–æ–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É
‚Ä¢ –°–æ–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 15
‚Ä¢ –ß–µ–º –º–µ–Ω—å—à–µ —Ö–æ–¥–æ–≤ - —Ç–µ–º –ª—É—á—à–µ!

üé≤ **–†–∞–∑–≤–∏–≤–∞–π—Ç–µ** –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ
"""
    }

    rule_text = rules.get(game_key, "–ü—Ä–∞–≤–∏–ª–∞ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã...")

    keyboard = [
        [InlineKeyboardButton(
            "üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å",
            web_app=WebAppInfo(url=game_info["web_app_url"])
        )],
        [InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data=f"rate_{game_key}")],
        [InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"review_{game_key}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"game_{game_key}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    description_text = f"""
{game_info['emoji']} **{game_info['name']}**

{rule_text}
"""

    await query.edit_message_text(
        description_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_development_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Ö–∞–±", callback_data="hub")],
        [InlineKeyboardButton("üèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–≥—Ä—ã", callback_data="top_games")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    dev_text = """
üöß **–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**

–≠—Ç–∞ –∏–≥—Ä–∞ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è! –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É—Å–µ—Ä–¥–Ω–æ —Ç—Ä—É–¥–∏—Ç—Å—è –Ω–∞–¥ –µ–µ —Å–æ–∑–¥–∞–Ω–∏–µ–º.

üìÖ **–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏:**
‚Ä¢ –ù–æ–≤—ã–µ –∏–≥—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ
‚Ä¢ –û–±–µ—â–∞–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!

–ê –ø–æ–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–∞—à–∏ –∏–≥—Ä—ã! üéÆ
"""

    await query.edit_message_text(
        dev_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üéÆ –í —Ö–∞–± –∏–≥—Ä", callback_data="hub")],
        [InlineKeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä", callback_data="top_games")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è", callback_data="start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    help_text = """
‚ùì **–ü–æ–º–æ—â—å –ø–æ –∏–≥—Ä–∞–º**

üéÆ **–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å:**
1. –ù–∞–∂–º–∏—Ç–µ "üéÆ –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É"
2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à—É—é—Å—è –∏–≥—Ä—É
3. –ù–∞–∂–º–∏—Ç–µ "üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å"
4. –ò–≥—Ä–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø—Ä—è–º–æ –≤ Telegram!

üì± **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:**
‚Ä¢ Telegram –¥–ª—è Android
‚Ä¢ Telegram –¥–ª—è iOS
‚Ä¢ Telegram Desktop
‚Ä¢ Telegram Web

üõ† **–ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É

üíæ **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –í—Å–µ –∏–≥—Ä—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ
‚Ä¢ –†–∞–±–æ—Ç–∞—é—Ç –æ—Ñ—Ñ–ª–∞–π–Ω
‚Ä¢ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö

‚≠ê **–†–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã:**
‚Ä¢ –û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –∏–≥—Ä—ã –∑–≤–µ–∑–¥–∞–º–∏
‚Ä¢ –û—Å—Ç–∞–≤–ª—è–π—Ç–µ –æ—Ç–∑—ã–≤—ã
‚Ä¢ –ü–æ–º–æ–≥–∞–π—Ç–µ —É–ª—É—á—à–∞—Ç—å –ø—Ä–æ–µ–∫—Ç

üí∞ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:**
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –¥–æ–Ω–∞—Ç–æ–º
‚Ä¢ –ü–æ–º–æ–≥–∏—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∏–≥—Ä—ã

üìß **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ: @developer_username
"""

    await query.edit_message_text(
        help_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_rate_games(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ—Ü–µ–Ω–∫–∏ –∏–≥—Ä"""
    query = update.callback_query
    await query.answer()

    keyboard = []
    for game_key, game_info in GAMES.items():
        if game_info["available"]:
            rating = get_average_rating(game_key)
            stars = "‚≠ê" * int(rating) if rating > 0 else "‚òÜ"
            keyboard.append([
                InlineKeyboardButton(
                    f"{game_info['emoji']} {game_info['name'].split()[-1]} {stars}",
                    callback_data=f"rate_{game_key}"
                )
            ])

    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="hub")
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)

    rate_text = """
‚≠ê **–û—Ü–µ–Ω–∏—Ç–µ –∏–≥—Ä—ã!**

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!
–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å:

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê - –û—Ç–ª–∏—á–Ω–æ!
‚≠ê‚≠ê‚≠ê‚≠ê - –•–æ—Ä–æ—à–æ
‚≠ê‚≠ê‚≠ê - –ù–æ—Ä–º–∞–ª—å–Ω–æ
‚≠ê‚≠ê - –¢–∞–∫ —Å–µ–±–µ
‚≠ê - –ü–ª–æ—Ö–æ

–ü–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤!
"""

    await query.edit_message_text(
        rate_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_game_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ—Ü–µ–Ω–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()

    game_key = query.data.replace("rate_", "")
    game_info = GAMES[game_key]
    current_rating = get_average_rating(game_key)
    stars = "‚≠ê" * int(current_rating) if current_rating > 0 else "‚òÜ"

    keyboard = [
        [
            InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"set_rating_{game_key}_5"),
            InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"set_rating_{game_key}_4")
        ],
        [
            InlineKeyboardButton("‚≠ê‚≠ê‚≠ê", callback_data=f"set_rating_{game_key}_3"),
            InlineKeyboardButton("‚≠ê‚≠ê", callback_data=f"set_rating_{game_key}_2")
        ],
        [
            InlineKeyboardButton("‚≠ê", callback_data=f"set_rating_{game_key}_1")
        ],
        [
            InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"review_{game_key}")
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rate_games")
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    rating_text = f"""
‚≠ê **–û—Ü–µ–Ω–∏—Ç–µ –∏–≥—Ä—É: {game_info['name']}**

–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stars} ({current_rating:.1f}/5)

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∏–≥—Ä—É:
"""

    await query.edit_message_text(
        rating_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def set_game_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()

    data_parts = query.data.split("_")
    game_key = data_parts[2]
    rating = int(data_parts[3])
    user_id = update.effective_user.id

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    new_rating = add_rating(game_key, user_id, rating)
    game_info = GAMES[game_key]
    stars = "‚≠ê" * rating

    keyboard = [
        [InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"review_{game_key}")],
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data=f"game_{game_key}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rate_games")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    thanks_text = f"""
‚≠ê **–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!**

–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –∏–≥—Ä–µ {game_info['name']} {stars} ({rating}/5)

–ù–æ–≤—ã–π —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {new_rating:.1f}/5

–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?
"""

    await query.edit_message_text(
        thanks_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã"""
    query = update.callback_query
    await query.answer()

    keyboard = []
    for game_key, game_info in GAMES.items():
        if game_info["available"]:
            reviews = get_reviews(game_key, limit=1)
            review_count = len(get_reviews(game_key, limit=100))
            keyboard.append([
                InlineKeyboardButton(
                    f"{game_info['emoji']} {game_info['name'].split()[-1]} ({review_count} –æ—Ç–∑—ã–≤–æ–≤)",
                    callback_data=f"game_reviews_{game_key}"
                )
            ])

    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="hub")
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)

    reviews_text = """
üí¨ **–û—Ç–∑—ã–≤—ã –∏–≥—Ä–æ–∫–æ–≤**

–ß–∏—Ç–∞–π—Ç–µ –∏ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –æ—Ç–∑—ã–≤—ã –Ω–∞ –∏–≥—Ä—ã!
–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç —É–ª—É—á—à–∞—Ç—å –ø—Ä–æ–µ–∫—Ç.

–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤:
"""

    await query.edit_message_text(
        reviews_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_game_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()

    game_key = query.data.replace("game_reviews_", "")
    game_info = GAMES[game_key]
    reviews = get_reviews(game_key, limit=5)
    rating = get_average_rating(game_key)
    stars = "‚≠ê" * int(rating) if rating > 0 else "‚òÜ"

    keyboard = [
        [InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"review_{game_key}")],
        [InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data=f"rate_{game_key}")],
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data=f"game_{game_key}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="reviews")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if reviews:
        reviews_text = "\n\nüí¨ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:**\n"
        for review in reviews:
            reviews_text += f"‚Ä¢ {review['text']}\n"
    else:
        reviews_text = "\n\nüìù –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!"

    game_reviews_text = f"""
üí¨ **–û—Ç–∑—ã–≤—ã –Ω–∞ –∏–≥—Ä—É: {game_info['name']}**

–†–µ–π—Ç–∏–Ω–≥: {stars} ({rating:.1f}/5)
{reviews_text}
"""

    await query.edit_message_text(
        game_reviews_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def request_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()

    game_key = query.data.replace("review_", "")
    game_info = GAMES[game_key]

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"game_{game_key}")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    review_text = f"""
üí¨ **–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ –∏–≥—Ä—É {game_info['name']}**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!

–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
–∏–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏.
"""

    await query.edit_message_text(
        review_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤
    context.user_data['reviewing_game'] = game_key

async def handle_review_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞"""
    if 'reviewing_game' in context.user_data:
        game_key = context.user_data['reviewing_game']
        game_info = GAMES[game_key]
        user_id = update.effective_user.id
        review_text = update.message.text

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤
        add_review(game_key, user_id, review_text)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del context.user_data['reviewing_game']

        keyboard = [
            [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data=f"game_{game_key}")],
            [InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data=f"rate_{game_key}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í —Ö–∞–±", callback_data="hub")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        thanks_text = f"""
üí¨ **–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!**

–í–∞—à –æ—Ç–∑—ã–≤ –Ω–∞ –∏–≥—Ä—É {game_info['name']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.

–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ —É—á—Ç–µ–º –µ–≥–æ
–ø—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö!

–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ?
"""

        await update.message.reply_text(
            thanks_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def show_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üí≥ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", url="https://www.tinkoff.ru/cf/1M8h6M6jJ9o")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="hub")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    support_text = """
üí∞ **–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç!**

–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–≥—Ä —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤.
–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–∂–µ—Ç:

üéÆ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∏–≥—Ä—ã
üêõ –ò—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏
‚ú® –£–ª—É—á—à–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
üì± –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

–õ—é–±–∞—è —Å—É–º–º–∞ –≤–∞–∂–Ω–∞ –¥–ª—è –Ω–∞—Å!
–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! ‚ù§Ô∏è

üí≥ **–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:**
‚Ä¢ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: —Å—Å—ã–ª–∫–∞ –≤—ã—à–µ
‚Ä¢ BTC: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
‚Ä¢ ETH: 0x89205A3A3b2A69De6Dbf7F01ED13B2108B2c43e7
"""

    await query.edit_message_text(
        support_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    data = query.data

    if data == "hub":
        await show_game_hub(update, context)
    elif data == "top_games":
        await show_top_games(update, context)
    elif data == "rate_games":
        await show_rate_games(update, context)
    elif data == "reviews":
        await show_reviews(update, context)
    elif data == "support":
        await show_support(update, context)
    elif data == "dev":
        await show_development_message(update, context)
    elif data == "help":
        await show_help(update, context)
    elif data == "start":
        await start(update, context)
    elif data.startswith("game_"):
        await handle_game_selection(update, context)
    elif data.startswith("desc_"):
        await show_game_description(update, context)
    elif data.startswith("rate_") and not data.startswith("set_rating_"):
        await show_game_rating(update, context)
    elif data.startswith("set_rating_"):
        await set_game_rating(update, context)
    elif data.startswith("review_"):
        await request_review(update, context)
    elif data.startswith("game_reviews_"):
        await show_game_reviews(update, context)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_review_text))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üéÆ –ë–æ—Ç '–•–∞–± –ò–≥—Ä' –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
